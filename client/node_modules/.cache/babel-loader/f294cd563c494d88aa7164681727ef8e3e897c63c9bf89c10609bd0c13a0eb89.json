{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API calls\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  getCurrentUser: () => api.get('/auth/me'),\n  upgradePremium: () => api.put('/auth/upgrade-premium')\n};\n\n// Blog API calls\nexport const blogAPI = {\n  getAllBlogs: () => api.get('/blogs'),\n  getBlogById: id => api.get(`/blogs/${id}`),\n  createBlog: blogData => api.post('/blogs', blogData),\n  updateBlog: (id, blogData) => api.put(`/blogs/${id}`, blogData),\n  deleteBlog: id => api.delete(`/blogs/${id}`),\n  likeBlog: id => api.put(`/blogs/${id}/like`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","getCurrentUser","get","upgradePremium","put","blogAPI","getAllBlogs","getBlogById","id","createBlog","blogData","updateBlog","deleteBlog","delete","likeBlog"],"sources":["C:/Users/dell/OneDrive/Desktop/With my Women/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['x-auth-token'] = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API calls\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  getCurrentUser: () => api.get('/auth/me'),\r\n  upgradePremium: () => api.put('/auth/upgrade-premium'),\r\n};\r\n\r\n// Blog API calls\r\nexport const blogAPI = {\r\n  getAllBlogs: () => api.get('/blogs'),\r\n  getBlogById: (id) => api.get(`/blogs/${id}`),\r\n  createBlog: (blogData) => api.post('/blogs', blogData),\r\n  updateBlog: (id, blogData) => api.put(`/blogs/${id}`, blogData),\r\n  deleteBlog: (id) => api.delete(`/blogs/${id}`),\r\n  likeBlog: (id) => api.put(`/blogs/${id}/like`),\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,cAAc,CAAC,GAAGK,KAAK;EACxC;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrBC,QAAQ,EAAGC,QAAQ,IAAKvB,GAAG,CAACwB,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAC5DE,KAAK,EAAGC,WAAW,IAAK1B,GAAG,CAACwB,IAAI,CAAC,aAAa,EAAEE,WAAW,CAAC;EAC5DC,cAAc,EAAEA,CAAA,KAAM3B,GAAG,CAAC4B,GAAG,CAAC,UAAU,CAAC;EACzCC,cAAc,EAAEA,CAAA,KAAM7B,GAAG,CAAC8B,GAAG,CAAC,uBAAuB;AACvD,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG;EACrBC,WAAW,EAAEA,CAAA,KAAMhC,GAAG,CAAC4B,GAAG,CAAC,QAAQ,CAAC;EACpCK,WAAW,EAAGC,EAAE,IAAKlC,GAAG,CAAC4B,GAAG,CAAC,UAAUM,EAAE,EAAE,CAAC;EAC5CC,UAAU,EAAGC,QAAQ,IAAKpC,GAAG,CAACwB,IAAI,CAAC,QAAQ,EAAEY,QAAQ,CAAC;EACtDC,UAAU,EAAEA,CAACH,EAAE,EAAEE,QAAQ,KAAKpC,GAAG,CAAC8B,GAAG,CAAC,UAAUI,EAAE,EAAE,EAAEE,QAAQ,CAAC;EAC/DE,UAAU,EAAGJ,EAAE,IAAKlC,GAAG,CAACuC,MAAM,CAAC,UAAUL,EAAE,EAAE,CAAC;EAC9CM,QAAQ,EAAGN,EAAE,IAAKlC,GAAG,CAAC8B,GAAG,CAAC,UAAUI,EAAE,OAAO;AAC/C,CAAC;AAED,eAAelC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}